/**
 * Base: Grid
 * -----------------------------------------------------------------------------
 * Primary grid system based on materialize.css.
 * - https://sass-mq.github.io/sass-mq
 */
// stylelint-disable
.container {
  margin: 0 auto;
  max-width: map-get($map: $mq-breakpoints, $key: wide);
  padding: 0 $GUTTER_WIDTH;
  width: 100%;

  @include mq($from: large) {
    padding: 0 $GUTTER_WIDTH * 2;
  }

  &#{&}--l {
    max-width: 1100px;
  }

  &.no-padding {
    padding-left: 0;
    padding-right: 0;
  }
}

.col .row {
  margin-left: -($GUTTER_WIDTH / 2);
  margin-right: -($GUTTER_WIDTH / 2);

  @include mq($from: large) {
    margin-left: -$GUTTER_WIDTH;
    margin-right: -$GUTTER_WIDTH;
  }
}

.row {
  margin-bottom: $ELEMENT_BOTTOM_MARGIN;
  margin-left: auto;
  margin-right: auto;

  &:last-child {
    margin-bottom: 0;
  }

  &.no-gutter {
    .col {
      padding: 0;
    }
  }

  &.no-margin {
    margin: 0;
  }

  &.no-margin-bottom {
    margin-bottom: 0;
  }

  &.no-margin-top {
    margin-top: 0;
  }

  &::after {
    clear: both;
    content: '';
    display: table;
  }

  @include mq($from: small) {
    &#{&}--flex-s {
      display: flex;
    }
  }

  @include mq($from: medium) {
    &#{&}--flex-m {
      display: flex;
    }
  }

  @include mq($from: large) {
    &#{&}--flex-l {
      display: flex;
    }
  }

  .col {
    box-sizing: border-box;
    float: left;
    min-height: 1px;
    padding: 0 ($GUTTER_WIDTH / 4);

    @include mq($from: medium) {
      padding: 0 ($GUTTER_WIDTH / 3);
    }

    @include mq($from: large) {
      padding: 0 ($GUTTER_WIDTH / 2);
    }

    .no-gutter {
      padding: 0;
    }

    &[class*='push-'],
    &[class*='pull-'] {
      position: relative;
    }

    $i: 1;

    @while $i <= $NUM_COLS {
      $perc: unquote((100 / ($NUM_COLS / $i)) + '%');

      &.xs#{$i} {
        @include reset-offset;
        width: $perc;
      }
      $i: $i + 1;
    }

    $i: 1;

    @while $i <= $NUM_COLS {
      $perc: unquote((100 / ($NUM_COLS / $i)) + '%');
      @include grid-classes('xs', $i, $perc);
      $i: $i + 1;
    }

    @include mq($from: small) {
      $i: 1;

      @while $i <= $NUM_COLS {
        $perc: unquote((100 / ($NUM_COLS / $i)) + '%');

        &.s#{$i} {
          @include reset-offset;
          width: $perc;
        }
        $i: $i + 1;
      }

      $i: 1;

      @while $i <= $NUM_COLS {
        $perc: unquote((100 / ($NUM_COLS / $i)) + '%');
        @include grid-classes('s', $i, $perc);
        $i: $i + 1;
      }
    }

    @include mq($from: medium) {
      $i: 1;

      @while $i <= $NUM_COLS {
        $perc: unquote((100 / ($NUM_COLS / $i)) + '%');

        &.m#{$i} {
          @include reset-offset;
          width: $perc;
        }
        $i: $i + 1;
      }

      $i: 1;

      @while $i <= $NUM_COLS {
        $perc: unquote((100 / ($NUM_COLS / $i)) + '%');
        @include grid-classes('m', $i, $perc);
        $i: $i + 1;
      }
    }

    @include mq($from: large) {
      $i: 1;

      @while $i <= $NUM_COLS {
        $perc: unquote((100 / ($NUM_COLS / $i)) + '%');

        &.l#{$i} {
          @include reset-offset;
          width: $perc;
        }
        $i: $i + 1;
      }

      $i: 1;

      @while $i <= $NUM_COLS {
        $perc: unquote((100 / ($NUM_COLS / $i)) + '%');
        @include grid-classes('l', $i, $perc);
        $i: $i + 1;
      }
    }

    @include mq($from: wide) {
      $i: 1;

      @while $i <= $NUM_COLS {
        $perc: unquote((100 / ($NUM_COLS / $i)) + '%');

        &.xl#{$i} {
          @include reset-offset;
          width: $perc;
        }
        $i: $i + 1;
      }

      $i: 1;

      @while $i <= $NUM_COLS {
        $perc: unquote((100 / ($NUM_COLS / $i)) + '%');
        @include grid-classes('xl', $i, $perc);
        $i: $i + 1;
      }
    }
  }
}
